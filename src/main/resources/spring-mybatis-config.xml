<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns="http://www.springframework.org/schema/beans"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                         ">
    <!-- 自动扫描 -->  
    <context:component-scan base-package="com.lq.dao" />
    <context:component-scan base-package="com.lq.*.service" />
    <context:component-scan base-package="com.lq.wechat.util"/>
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />
    <!-- 扫描实体类，并创建表-->
    <bean class="com.lq.code.executor.processor.InstantiationTracingBeanPostProcessor">
        <property name="packagePath" value="com.lq.entity"/>
        <property name="updateDB" value="true"/>
    </bean>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
            监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall-->
        <property name="filters" value="stat" />
        <!--最大连接池数量-->
        <property name="maxActive" value="${durid.pool.maxActive}" />
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时-->
        <property name="initialSize" value="${durid.pool.initialSize}" />
        <!--获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。-->
        <property name="maxWait" value="${durid.pool.maxWait}" />
        <!--最小连接池数量-->
        <property name="minIdle" value="${durid.pool.minIdle}" />
        <!--有两个含义：1.Destroy线程会检测连接的间隔时间 2.testWhileIdle的判断依据，-->
        <property name="timeBetweenEvictionRunsMillis" value="${durid.pool.timeBetweenEvictionRunsMillis}" />

        <!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。-->
        <property name="poolPreparedStatements" value="${durid.pool.poolPreparedStatements}"/>
        <!--要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100-->
       <!-- <property name="maxPoolPreparedStatementPerConnectionSize" value="${durid.pool.maxPoolPreparedStatementPerConnectionSize}"/>-->
        
        <property name="minEvictableIdleTimeMillis" value="${durid.pool.minEvictableIdleTimeMillis}" />
        <!--用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
        <property name="validationQuery" value="${durid.pool.validationQuery}" />
        <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
        <property name="testWhileIdle" value="${durid.pool.testWhileIdle}" />
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
        <property name="testOnBorrow" value="${durid.pool.testOnBorrow}" />
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnReturn" value="${durid.pool.testOnReturn}" />
        <property name="removeAbandonedTimeout" value="${durid.pool.removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
        <property name="logAbandoned" value="${durid.pool.logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
        <!-- 物理连接初始化的时候执行的sql-->
       <!-- <property name="connectionInitSqls" value=""/>-->
    </bean>

    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mybatis/mapping/*.xml"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
  <!--  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <!- 自动扫描mapping.xml文件 -->
    <!--    <property name="mapperLocations" value="classpath:mybatis/mapping/*.xml"></property>
    </bean>-->

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.lq.dao" />
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>

    <!--  spring jdbc 模板-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启事务管理注解 proxy-taget-class=true 是使用cglib代理方式-->
    <!-- spring 代理方式有两种：jdk代理和cglib代理-->
    <!-- 区别 cglib代理基于继承 可以无需接口; jdk 代理基于实现接口invocationHandler与Proxy.newProxyInstace 必须实现接口，否则无法完成代理-->
    <tx:annotation-driven transaction-manager="transactionManager"  />


  
</beans>