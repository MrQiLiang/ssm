<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

    <!-- 启用shiro注解 -->
    <!-- 不使用jdk 代理出现的问题 https://blog.csdn.net/qq_28851503/article/details/58707288-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean
            class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>


    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />

    <!-- 配置Session DAO的操作处理 -->
   <!-- <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">-->
        <!-- 设置session缓存的名字，这个名字可以任意 -->
      <!--  <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>-->
        <!-- 定义该Session DAO操作中所使用的ID生成器 -->
      <!--  <property name="sessionIdGenerator" ref="sessionIdGenerator"/>-->
        <!-- session缓冲管理-->
       <!-- <property name="cacheManager" ref="shiroCacheManager"/>-->
   <!-- </bean> -->

    <bean id="sessionDAO" class="com.lq.code.cache.RedisSessionDao">
        <constructor-arg ref="redisTempale"/>
        <constructor-arg value="30000000"/>
    </bean>

    <!-- 配置需要向Cookie中保存数据的配置模版 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- 在Tomcat运行下默认使用的Cookie的名字为JSESSIONID -->
        <constructor-arg name="name" value="mldn-session-id"/>
        <!-- 保证该系统不会受到跨域的脚本操作供给 -->
        <property name="httpOnly" value="true"/>
        <!-- 定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 -->
        <property name="maxAge" value="-1"/>


    </bean>

    <!-- 定义会话管理器的操作 -->
    <bean id="sessionManager"
          class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionIdUrlRewritingEnabled" value="false" />
        <!-- 定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置 -->
    <!--   <property name="globalSessionTimeout" value="1800000"/>-->
        <!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
        <property name="deleteInvalidSessions" value="false"/>
        <!-- 定义要使用的无效的Session定时调度器 -->
        <!-- <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>-->
        <!-- 需要让此session可以使用该定时调度器进行检测 -->
        <!--<property name="sessionValidationSchedulerEnabled" value="true"/>-->
        <!-- 定义Session可以进行序列化的工具类 -->
        <property name="sessionDAO" ref="sessionDAO"/>
        <!-- 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 定义sessionIdCookie模版可以进行操作的启用 -->
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean>

    <!-- 配置session的定时验证检测程序类，以让无效的session释放 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!-- 设置session的失效扫描间隔，单位为毫秒 -->
        <property name="sessionValidationInterval" value="36000000"/>
        <!-- 随后还需要定义有一个会话管理器的程序类的引用 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 配置SecurityManager的管理 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 配置你需要使用的Realms -->
        <property name="realm" ref="myRealm"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <!-- 定义要使用的session管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>



    <!-- 启动shrio授权注解拦截方式-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 装配 securityManager-->
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置登陆地址-->
        <property name="loginUrl" value="/cms/login/index"/>
        <!-- 登陆成功后界面-->
        <property name="successUrl" value="/cms/index"/>
        <!-- 没有权限时跳转的url-->
        <property name="unauthorizedUrl" value="/cms/login"/>

        <property name="filters">
            <map>
                <entry key="logout" value-ref="logoutFilter"/>
            </map>
        </property>

        <property name="filterChainDefinitions">
            <!--
              anon 可以匿名访问
              authc 需认证
              user  需认证并且可以使用缓存中的认证
              -->
            <value>
            /cms/login/loginOut = logout
            /cms/login/** = anon
            /cms/index = authc
            /cms/** =  authc
            </value>
        </property>
    </bean>

    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/cms/login/index"/>
    </bean>

    <!--自定义授权和认证的Realm-->
    <bean id="myRealm" class="com.lq.code.interceptor.shiro.ShiroRealm">
        <!-- 启动认证缓存 默认false-->
        <property name="authenticationCachingEnabled" value="false"/>
        <!-- 启动授权缓存 -->
        <property name="authorizationCachingEnabled" value="false"/>

    </bean>

    <!-- spring 缓存管理 暂时放在这里，看看 session过快失效的问题
    <bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
    </bean>

    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache/ehcache-shiro.xml"/>
    </bean>
    -->
    <!-- shiro 缓存管理器-->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml"/>

    </bean>

    <!--配置bean 后置处理器：会自动的调用和spring 整合后的各个组件的生命周期方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>


</beans>
